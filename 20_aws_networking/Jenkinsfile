pipeline {
    agent any

    environment {
        PROJECT = '20_aws_networking'
        AWS_CREDENTIALS = 'aws-credentials'
    }

    parameters {
        choice(
            name: 'WORKSPACE',
            choices: ['euc1-dev', 'euc1-prod', 'eun1-dev', 'eun1-prod'],
            description: 'Select the Terraform workspace'
        )
        booleanParam(
            name: 'DESTROY',
            defaultValue: false,
            description: 'Destroy the infrastructure'
        )
    }

    stages {
        stage('Checkout') {
            steps {
                dir("${env.PROJECT}") {
                    git(
                        url: 'git@github.com:turb0bur/terraform.git',
                        credentialsId: 'github-turb0bur',
                        branch: 'mentoring'
                    )
                }
            }
        }

        stage('Terraform Format') {
            steps {
                sh 'terraform fmt -check'
            }
        }

        stage('Terraform Validate') {
            steps {
                sh 'terraform validate'
            }
        }

        stage('Terraform Init') {
            steps {
            withCredentials([
                aws(
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    credentialsId: "${AWS_CREDENTIALS}",
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                )
            ]) {
                sh """
                    export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                    export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                    terraform init
                    terraform workspace new ${params.WORKSPACE} || terraform workspace select ${params.WORKSPACE}
                """
               }
            }
        }

        stage('Terraform Plan') {
            when {
                expression { return !params.DESTROY }
            }
            steps {
                sh "terraform plan -out=tfplan --var-file=workspaces/${params.WORKSPACE}.tfvars"
            }
        }

        stage('Terraform Apply') {
            when {
                expression { return !params.DESTROY }
            }
            steps {
                sh "terraform apply -auto-approve tfplan --var-file=workspaces/${params.WORKSPACE}.tfvars"
            }
        }

        stage('Terraform Destroy') {
            when {
                expression { return params.DESTROY }
            }
            steps {
                sh "terraform destroy -auto-approve --var-file=workspaces/${params.WORKSPACE}.tfvars"
                error("Pipeline stopped after destroying the infrastructure.")
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}